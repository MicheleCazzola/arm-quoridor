# program_1.s

.data

v1:		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		
v2:		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0

v3:		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		
v4:		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		.double	1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0
		
v5:		.space 512
v6:		.space 512
v7:		.space 512	
				
.text
main:

	daddui R1, R0, 0		# index		
	daddui R2, R0, 0		# offset
	daddui R3, R0, 64		# limit
	daddui R4, R0, 1		# m
	daddui R5, R0, 1		# 1-int
	mtc1 R0, F0				# zero-double
	mtc1 R0, F10			# k
	mtc1 R0, F11			# p
	
loop:
	l.d F1, v1(R2)						
	l.d F2, v2(R2)
	l.d F3, v3(R2)
	l.d F4, v4(R2)
	
check:
	andi R10, R1, 0x1
	add.d F7, F2, F3		# v2[i] + v3[i]
	beq R10, R5, odd

even:	
	dsllv R11, R4, R1
	mtc1 R11, F12
	cvt.d.l F12, F12
	mul.d F11, F1, F12		# v1[i]
	daddui R1, R1, 1
	cvt.l.d F20, F11		
	mfc1 R4, F20			# m
	
	j v5_op
	
odd:
	mtc1 R4, F13
	cvt.d.l F13, F13
	mtc1 R1, F14
	cvt.d.l F14, F14
	mul.d F15, F13, F14
	daddui R1, R1, 1
	div.d F11, F1, F15		# p
	
	cvt.l.d F17, F4
	mfc1 R13, F17
	dsrav R14, R13, R1
	mtc1 R14, F16
	cvt.d.l	F10, F16		# k
	
v5_op:
	
	mul.d F5, F11, F2	
	add.d F6, F10, F1		# k + v1[i]
	add.d F5, F5, F3					
	add.d F5, F5, F4
	s.d F5, v5(R2)						

v6_op:
	
	div.d F6, F5, F6					
	s.d F6, v6(R2)

v7_op:
	
	mul.d F7, F6, F7
	s.d F7, v7(R2)
	
increment:
	
	daddui R2, R2, 8
	
	bne R1, R3, loop								
	
end_loop:

	nop
	halt								